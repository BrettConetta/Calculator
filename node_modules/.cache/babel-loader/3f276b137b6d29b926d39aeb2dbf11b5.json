{"ast":null,"code":"var _jsxFileName = \"/Users/brett/Documents/dev/react/Calculator/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './Components/Calculator/Calculator';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentVal: \"_\",\n      start: true,\n      operators: false,\n      zeroFirst: true,\n      numAllowed: true,\n      zeroFirstAgo: 0,\n      operatorsAgo: 0,\n      decimalAgo: 0,\n      oldOperators: 0,\n      decimal: true,\n      backspace: true\n    };\n\n    this.numberClickHandler = event => {\n      if (this.state.start) {\n        this.setState({\n          currentVal: `${event.currentTarget.value}`,\n          start: false,\n          oldOperators: this.state.operatorsAgo,\n          operators: true,\n          operatorsAgo: 1,\n          zeroFirst: true,\n          numAllowed: true,\n          zeroFirstAgo: this.state.zeroFirstAgo + 1,\n          decimalAgo: this.state.decimalAgo + 1 //decimal: true\n\n        });\n      } else {\n        this.setState({\n          currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n          operators: true,\n          oldOperators: this.state.operatorsAgo,\n          operatorsAgo: this.state.operatorsAgo + 1,\n          zeroFirst: true,\n          numAllowed: true,\n          zeroFirstAgo: this.state.zeroFirstAgo + 1,\n          decimalAgo: this.state.decimalAgo + 1 //decimal: true\n\n        });\n      }\n    };\n\n    this.operatorClickHandler = event => {\n      this.setState({\n        currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n        start: false,\n        operators: false,\n        oldOperators: this.state.operatorsAgo,\n        operatorsAgo: 0,\n        decimal: true,\n        zeroFirst: true,\n        numAllowed: true,\n        zeroFirstAgo: this.state.zeroFirstAgo + 1,\n        decimalAgo: this.state.decimalAgo + 1\n      });\n    };\n\n    this.divideClickHandler = event => {\n      this.setState({\n        currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n        start: false,\n        operators: false,\n        oldOperators: this.state.operatorsAgo,\n        operatorsAgo: 0,\n        decimal: true,\n        zeroFirst: false,\n        numAllowed: true,\n        zeroFirstAgo: this.state.zeroFirstAgo + 1,\n        decimalAgo: this.state.decimalAgo + 1\n      });\n    };\n\n    this.clearClickHandler = () => {\n      this.setState({\n        currentVal: \"_\",\n        start: true,\n        operators: false,\n        operatorsAgo: 0,\n        oldOperators: 0,\n        zeroFirst: true,\n        numAllowed: true,\n        zeroFirstAgo: 0,\n        decimalAgo: 0,\n        decimal: true,\n        backspace: true\n      });\n    };\n\n    this.equalClickHandler = () => {\n      //const newStr = eval(this.state.currentVal).toString();\n      try {\n        const testnewStr = Math.round(eval(this.state.currentVal) * 100000000) / 100000000;\n        const newStr = testnewStr.toString();\n        this.setState({\n          currentVal: newStr,\n          operatorsAgo: newStr.length,\n          oldOperators: newStr.length,\n          start: true,\n          decimal: true\n        });\n      } catch (err) {\n        this.setState({\n          currentVal: \"error\",\n          numAllowed: false,\n          decimal: false,\n          operators: false,\n          zeroFirst: false,\n          backspace: false\n        });\n      }\n    };\n\n    this.bkspcClickHandler = () => {\n      const len = this.state.currentVal.length;\n      const newStr = this.state.currentVal.substring(0, len - 1);\n\n      if (len > 1 && this.state.currentVal.charAt(len - 2) === '/') {\n        this.setState({\n          currentVal: `${newStr}`,\n          operators: false,\n          start: false,\n          zeroFirst: false,\n          operatorsAgo: this.state.oldOperators,\n          decimalAgo: this.state.decimalAgo - 1\n        });\n      } else if (len > 1 && this.state.operatorsAgo === 1) //if last char is operator\n        this.setState({\n          currentVal: `${newStr}`,\n          operators: false,\n          start: false,\n          operatorsAgo: this.state.oldOperators,\n          decimalAgo: this.state.decimalAgo - 1\n        });else if (len > 1 && this.state.zeroFirstAgo === 1) //if last char is a 0\n        this.setState({\n          currentVal: `${newStr}`,\n          operators: true,\n          start: false,\n          oldOperators: this.state.oldOperators - 1,\n          operatorsAgo: this.state.operatorsAgo - 1,\n          zeroFirstAgo: this.state.zeroFirstAgo - 1,\n          zeroFirst: false,\n          decimalAgo: this.state.decimalAgo - 1,\n          decimal: true\n        });else if (len > 1 && this.state.decimalAgo === 1) //if last char is a decimal\n        this.setState({\n          currentVal: `${newStr}`,\n          start: false,\n          operators: true,\n          operatorsAgo: this.state.operatorsAgo - 1,\n          zeroFirstAgo: this.state.zeroFirstAgo - 1,\n          decimalAgo: this.state.decimalAgo - 1,\n          decimal: false\n        });else if (len > 1) this.setState({\n        currentVal: `${newStr}`,\n        start: false,\n        operators: true,\n        operatorsAgo: this.state.operatorsAgo - 1,\n        zeroFirstAgo: this.state.zeroFirstAgo - 1,\n        decimalAgo: this.state.decimalAgo - 1\n      });else if (len === 1) this.setState({\n        currentVal: \"_\",\n        start: true,\n        operators: false,\n        operatorsAgo: 0,\n        zeroFirst: true\n      });\n    };\n\n    this.decimalClickHandler = async event => {\n      if (this.state.start) {\n        await this.setState({\n          currentVal: `${event.currentTarget.value}`,\n          start: false,\n          oldOperators: this.state.operatorsAgo,\n          operators: false,\n          operatorsAgo: this.state.operatorsAgo + 1,\n          decimal: false,\n          decimalAgo: 0,\n          zeroFirst: true,\n          numAllowed: true,\n          zeroFirstAgo: this.state.zeroFirstAgo + 1\n        });\n      } else {\n        await this.setState({\n          currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n          operators: false,\n          oldOperators: this.state.operatorsAgo,\n          operatorsAgo: this.state.operatorsAgo + 1,\n          decimal: false,\n          decimalAgo: 0,\n          zeroFirst: true,\n          numAllowed: true,\n          zeroFirstAgo: this.state.zeroFirstAgo + 1\n        });\n      }\n\n      const splitResult = this.state.currentVal.split(\"/\");\n      const splitLen = splitResult.length;\n\n      if (splitResult[splitLen - 1] === 0) {\n        this.setState({\n          operators: false\n        });\n      }\n    };\n\n    this.zeroClickHandler = async event => {\n      if (this.state.start) {\n        await this.setState({\n          currentVal: `${event.currentTarget.value}`,\n          start: false,\n          oldOperators: this.state.operatorsAgo,\n          operators: true,\n          operatorsAgo: this.state.operatorsAgo + 1,\n          //decimal: true,\n          decimalAgo: this.state.decimalAgo + 1,\n          zeroFirst: false,\n          numAllowed: false,\n          zeroFirstAgo: 0\n        });\n      } else {\n        await this.setState({\n          currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n          operators: true,\n          oldOperators: this.state.operatorsAgo,\n          operatorsAgo: this.state.operatorsAgo + 1,\n          //decimal: true,\n          decimalAgo: this.state.decimalAgo + 1,\n          zeroFirstAgo: 0\n        });\n      }\n\n      if (this.state.operatorsAgo === 0) {\n        this.setState({\n          zeroFirst: false\n        });\n      }\n\n      const splitResult = this.state.currentVal.split(\"/\");\n      const splitLen = splitResult.length;\n\n      if (splitResult[splitLen - 1] === 0) {\n        this.setState({\n          decimal: false,\n          operators: false\n        });\n      }\n      /*else\n      {\n        this.setState({\n          operators: true\n        });\n      }*/\n      //.0 not registering\n      //try splitting by '/' check the last element in array then if == 0, dont allow '='\n\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(Calculator, {\n      numClicked: this.numberClickHandler,\n      operatorClicked: this.operatorClickHandler,\n      divideClicked: this.divideClickHandler,\n      clearClicked: this.clearClickHandler,\n      equalClicked: this.equalClickHandler,\n      bkspcClicked: this.bkspcClickHandler,\n      decimalClicked: this.decimalClickHandler,\n      zeroClicked: this.zeroClickHandler,\n      value: this.state.currentVal,\n      operatorsNotAllowed: !this.state.operators,\n      decimalNotAllowed: !this.state.decimal,\n      zeroNotAllowed: !this.state.zeroFirst,\n      numNotAllowed: !this.state.numAllowed,\n      backspaceNotAllowed: !this.state.backspace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brett/Documents/dev/react/Calculator/src/App.js"],"names":["React","Component","Calculator","App","state","currentVal","start","operators","zeroFirst","numAllowed","zeroFirstAgo","operatorsAgo","decimalAgo","oldOperators","decimal","backspace","numberClickHandler","event","setState","currentTarget","value","operatorClickHandler","divideClickHandler","clearClickHandler","equalClickHandler","testnewStr","Math","round","eval","newStr","toString","length","err","bkspcClickHandler","len","substring","charAt","decimalClickHandler","splitResult","split","splitLen","zeroClickHandler","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA6B;AAAA;AAAA;AAAA,SAE3BG,KAF2B,GAEnB;AACNC,MAAAA,UAAU,EAAE,GADN;AAENC,MAAAA,KAAK,EAAE,IAFD;AAGNC,MAAAA,SAAS,EAAE,KAHL;AAINC,MAAAA,SAAS,EAAE,IAJL;AAKNC,MAAAA,UAAU,EAAE,IALN;AAMNC,MAAAA,YAAY,EAAE,CANR;AAONC,MAAAA,YAAY,EAAE,CAPR;AAQNC,MAAAA,UAAU,EAAE,CARN;AASNC,MAAAA,YAAY,EAAE,CATR;AAUNC,MAAAA,OAAO,EAAE,IAVH;AAWNC,MAAAA,SAAS,EAAE;AAXL,KAFmB;;AAAA,SAgB3BC,kBAhB2B,GAgBLC,KAAD,IAAW;AAC9B,UAAI,KAAKb,KAAL,CAAWE,KAAf,EAAsB;AACpB,aAAKY,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAG,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EAD7B;AAEZd,UAAAA,KAAK,EAAE,KAFK;AAGZO,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAHb;AAIZJ,UAAAA,SAAS,EAAE,IAJC;AAKZI,UAAAA,YAAY,EAAE,CALF;AAMZH,UAAAA,SAAS,EAAE,IANC;AAOZC,UAAAA,UAAU,EAAE,IAPA;AAQZC,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAR1B;AASZE,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB,CATtB,CAUZ;;AAVY,SAAd;AAYD,OAbD,MAcI;AAEF,aAAKM,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAG,GAAE,KAAKD,KAAL,CAAWC,UAAW,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EADrD;AAEZb,UAAAA,SAAS,EAAE,IAFC;AAGZM,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAHb;AAIZA,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CAJ1B;AAKZH,UAAAA,SAAS,EAAE,IALC;AAMZC,UAAAA,UAAU,EAAE,IANA;AAOZC,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAP1B;AAQZE,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB,CARtB,CASZ;;AATY,SAAd;AAWD;AACF,KA7C0B;;AAAA,SA+C3BS,oBA/C2B,GA+CHJ,KAAD,IAAW;AAChC,WAAKC,QAAL,CAAc;AACZb,QAAAA,UAAU,EAAG,GAAE,KAAKD,KAAL,CAAWC,UAAW,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EADrD;AAEZd,QAAAA,KAAK,EAAE,KAFK;AAGZC,QAAAA,SAAS,EAAE,KAHC;AAIZM,QAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAJb;AAKZA,QAAAA,YAAY,EAAE,CALF;AAMZG,QAAAA,OAAO,EAAE,IANG;AAOZN,QAAAA,SAAS,EAAE,IAPC;AAQZC,QAAAA,UAAU,EAAE,IARA;AASZC,QAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAT1B;AAUZE,QAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB;AAVtB,OAAd;AAYD,KA5D0B;;AAAA,SA8D3BU,kBA9D2B,GA8DLL,KAAD,IAAW;AAC9B,WAAKC,QAAL,CAAc;AACZb,QAAAA,UAAU,EAAG,GAAE,KAAKD,KAAL,CAAWC,UAAW,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EADrD;AAEZd,QAAAA,KAAK,EAAE,KAFK;AAGZC,QAAAA,SAAS,EAAE,KAHC;AAIZM,QAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAJb;AAKZA,QAAAA,YAAY,EAAE,CALF;AAMZG,QAAAA,OAAO,EAAE,IANG;AAOZN,QAAAA,SAAS,EAAE,KAPC;AAQZC,QAAAA,UAAU,EAAE,IARA;AASZC,QAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAT1B;AAUZE,QAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB;AAVtB,OAAd;AAYD,KA3E0B;;AAAA,SA6E3BW,iBA7E2B,GA6EP,MAAM;AACxB,WAAKL,QAAL,CAAc;AACZb,QAAAA,UAAU,EAAE,GADA;AAEZC,QAAAA,KAAK,EAAE,IAFK;AAGZC,QAAAA,SAAS,EAAE,KAHC;AAIZI,QAAAA,YAAY,EAAE,CAJF;AAKZE,QAAAA,YAAY,EAAE,CALF;AAMZL,QAAAA,SAAS,EAAE,IANC;AAOZC,QAAAA,UAAU,EAAE,IAPA;AAQZC,QAAAA,YAAY,EAAE,CARF;AASZE,QAAAA,UAAU,EAAE,CATA;AAUZE,QAAAA,OAAO,EAAE,IAVG;AAWZC,QAAAA,SAAS,EAAE;AAXC,OAAd;AAaD,KA3F0B;;AAAA,SA6F3BS,iBA7F2B,GA6FP,MAAM;AACxB;AAEA,UAAI;AACJ,cAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAAC,KAAKxB,KAAL,CAAWC,UAAZ,CAAJ,GAA8B,SAAzC,IAAoD,SAAvE;AACA,cAAMwB,MAAM,GAAGJ,UAAU,CAACK,QAAX,EAAf;AAEA,aAAKZ,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAEwB,MADA;AAEZlB,UAAAA,YAAY,EAAEkB,MAAM,CAACE,MAFT;AAGZlB,UAAAA,YAAY,EAAEgB,MAAM,CAACE,MAHT;AAIZzB,UAAAA,KAAK,EAAE,IAJK;AAKZQ,UAAAA,OAAO,EAAE;AALG,SAAd;AAMC,OAVD,CAUE,OAAMkB,GAAN,EAAW;AACX,aAAKd,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAE,OADA;AAEZI,UAAAA,UAAU,EAAE,KAFA;AAGZK,UAAAA,OAAO,EAAE,KAHG;AAIZP,UAAAA,SAAS,EAAE,KAJC;AAKZC,UAAAA,SAAS,EAAE,KALC;AAMZO,UAAAA,SAAS,EAAE;AANC,SAAd;AAQD;AACF,KApH0B;;AAAA,SAsH3BkB,iBAtH2B,GAsHP,MAAM;AACxB,YAAMC,GAAG,GAAG,KAAK9B,KAAL,CAAWC,UAAX,CAAsB0B,MAAlC;AACA,YAAMF,MAAM,GAAG,KAAKzB,KAAL,CAAWC,UAAX,CAAsB8B,SAAtB,CAAgC,CAAhC,EAAkCD,GAAG,GAAC,CAAtC,CAAf;;AAEA,UAAGA,GAAG,GAAG,CAAN,IAAW,KAAK9B,KAAL,CAAWC,UAAX,CAAsB+B,MAAtB,CAA6BF,GAAG,GAAC,CAAjC,MAAwC,GAAtD,EACA;AAEE,aAAKhB,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAG,GAAEwB,MAAO,EADV;AAEZtB,UAAAA,SAAS,EAAE,KAFC;AAGZD,UAAAA,KAAK,EAAE,KAHK;AAIZE,UAAAA,SAAS,EAAE,KAJC;AAKZG,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWS,YALb;AAMZD,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB;AANtB,SAAd;AAQD,OAXD,MAYK,IAAGsB,GAAG,GAAG,CAAN,IAAW,KAAK9B,KAAL,CAAWO,YAAX,KAA4B,CAA1C,EAA6C;AAChD,aAAKO,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAG,GAAEwB,MAAO,EADV;AAEZtB,UAAAA,SAAS,EAAE,KAFC;AAGZD,UAAAA,KAAK,EAAE,KAHK;AAIZK,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWS,YAJb;AAKZD,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB;AALtB,SAAd,EADG,KAQA,IAAGsB,GAAG,GAAG,CAAN,IAAW,KAAK9B,KAAL,CAAWM,YAAX,KAA4B,CAA1C,EAA6C;AAChD,aAAKQ,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAG,GAAEwB,MAAO,EADV;AAEZtB,UAAAA,SAAS,EAAE,IAFC;AAGZD,UAAAA,KAAK,EAAE,KAHK;AAIZO,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWS,YAAX,GAAwB,CAJ1B;AAKZF,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CAL1B;AAMZD,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAN1B;AAOZF,UAAAA,SAAS,EAAE,KAPC;AAQZI,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB,CARtB;AASZE,UAAAA,OAAO,EAAE;AATG,SAAd,EADG,KAYA,IAAGoB,GAAG,GAAG,CAAN,IAAW,KAAK9B,KAAL,CAAWQ,UAAX,KAA0B,CAAxC,EAA2C;AAC9C,aAAKM,QAAL,CAAc;AACZb,UAAAA,UAAU,EAAG,GAAEwB,MAAO,EADV;AAEZvB,UAAAA,KAAK,EAAE,KAFK;AAGZC,UAAAA,SAAS,EAAE,IAHC;AAIZI,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CAJ1B;AAKZD,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAL1B;AAMZE,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB,CANtB;AAOZE,UAAAA,OAAO,EAAE;AAPG,SAAd,EADG,KAUA,IAAGoB,GAAG,GAAG,CAAT,EACH,KAAKhB,QAAL,CAAc;AACZb,QAAAA,UAAU,EAAG,GAAEwB,MAAO,EADV;AAEZvB,QAAAA,KAAK,EAAE,KAFK;AAGZC,QAAAA,SAAS,EAAE,IAHC;AAIZI,QAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CAJ1B;AAKZD,QAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB,CAL1B;AAMZE,QAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB;AANtB,OAAd,EADG,KASA,IAAIsB,GAAG,KAAK,CAAZ,EACH,KAAKhB,QAAL,CAAc;AACZb,QAAAA,UAAU,EAAE,GADA;AAEZC,QAAAA,KAAK,EAAE,IAFK;AAGZC,QAAAA,SAAS,EAAE,KAHC;AAIZI,QAAAA,YAAY,EAAE,CAJF;AAKZH,QAAAA,SAAS,EAAE;AALC,OAAd;AAOH,KArL0B;;AAAA,SAuL3B6B,mBAvL2B,GAuLL,MAAOpB,KAAP,IAAiB;AACrC,UAAI,KAAKb,KAAL,CAAWE,KAAf,EACA;AACE,cAAM,KAAKY,QAAL,CAAc;AAClBb,UAAAA,UAAU,EAAG,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EADvB;AAElBd,UAAAA,KAAK,EAAE,KAFW;AAGlBO,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAHP;AAIlBJ,UAAAA,SAAS,EAAE,KAJO;AAKlBI,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CALpB;AAMlBG,UAAAA,OAAO,EAAE,KANS;AAOlBF,UAAAA,UAAU,EAAE,CAPM;AAQlBJ,UAAAA,SAAS,EAAE,IARO;AASlBC,UAAAA,UAAU,EAAE,IATM;AAUlBC,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB;AAVpB,SAAd,CAAN;AAYD,OAdD,MAgBA;AACE,cAAM,KAAKQ,QAAL,CAAc;AAClBb,UAAAA,UAAU,EAAG,GAAE,KAAKD,KAAL,CAAWC,UAAW,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EAD/C;AAElBb,UAAAA,SAAS,EAAE,KAFO;AAGlBM,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAHP;AAIlBA,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CAJpB;AAKlBG,UAAAA,OAAO,EAAE,KALS;AAMlBF,UAAAA,UAAU,EAAE,CANM;AAOlBJ,UAAAA,SAAS,EAAE,IAPO;AAQlBC,UAAAA,UAAU,EAAE,IARM;AASlBC,UAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YAAX,GAAwB;AATpB,SAAd,CAAN;AAWD;;AAED,YAAM4B,WAAW,GAAG,KAAKlC,KAAL,CAAWC,UAAX,CAAsBkC,KAAtB,CAA4B,GAA5B,CAApB;AACA,YAAMC,QAAQ,GAAGF,WAAW,CAACP,MAA7B;;AAEA,UAAGO,WAAW,CAACE,QAAQ,GAAG,CAAZ,CAAX,KAA8B,CAAjC,EACA;AACE,aAAKtB,QAAL,CAAc;AACZX,UAAAA,SAAS,EAAE;AADC,SAAd;AAGD;AACF,KA/N0B;;AAAA,SAiO3BkC,gBAjO2B,GAiOR,MAAOxB,KAAP,IAAiB;AAClC,UAAI,KAAKb,KAAL,CAAWE,KAAf,EACA;AACE,cAAM,KAAKY,QAAL,CAAc;AAClBb,UAAAA,UAAU,EAAG,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EADvB;AAElBd,UAAAA,KAAK,EAAE,KAFW;AAGlBO,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAHP;AAIlBJ,UAAAA,SAAS,EAAE,IAJO;AAKlBI,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CALpB;AAMlB;AACAC,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB,CAPhB;AAQlBJ,UAAAA,SAAS,EAAE,KARO;AASlBC,UAAAA,UAAU,EAAE,KATM;AAUlBC,UAAAA,YAAY,EAAE;AAVI,SAAd,CAAN;AAYD,OAdD,MAgBA;AACE,cAAM,KAAKQ,QAAL,CAAc;AAClBb,UAAAA,UAAU,EAAG,GAAE,KAAKD,KAAL,CAAWC,UAAW,GAAEY,KAAK,CAACE,aAAN,CAAoBC,KAAM,EAD/C;AAElBb,UAAAA,SAAS,EAAE,IAFO;AAGlBM,UAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWO,YAHP;AAIlBA,UAAAA,YAAY,EAAE,KAAKP,KAAL,CAAWO,YAAX,GAAwB,CAJpB;AAKlB;AACAC,UAAAA,UAAU,EAAE,KAAKR,KAAL,CAAWQ,UAAX,GAAsB,CANhB;AAOlBF,UAAAA,YAAY,EAAE;AAPI,SAAd,CAAN;AASD;;AAED,UAAG,KAAKN,KAAL,CAAWO,YAAX,KAA4B,CAA/B,EACA;AACE,aAAKO,QAAL,CAAc;AACZV,UAAAA,SAAS,EAAE;AADC,SAAd;AAGD;;AAED,YAAM8B,WAAW,GAAG,KAAKlC,KAAL,CAAWC,UAAX,CAAsBkC,KAAtB,CAA4B,GAA5B,CAApB;AACA,YAAMC,QAAQ,GAAGF,WAAW,CAACP,MAA7B;;AAEA,UAAGO,WAAW,CAACE,QAAQ,GAAG,CAAZ,CAAX,KAA8B,CAAjC,EACA;AACE,aAAKtB,QAAL,CAAc;AACZJ,UAAAA,OAAO,EAAE,KADG;AAEZP,UAAAA,SAAS,EAAE;AAFC,SAAd;AAID;AACD;;;;;;AAOA;AAEA;;AACD,KAzR0B;AAAA;;AA2R3BmC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAE,KAAK1B,kBADnB;AAEE,MAAA,eAAe,EAAE,KAAKK,oBAFxB;AAGE,MAAA,aAAa,EAAE,KAAKC,kBAHtB;AAIE,MAAA,YAAY,EAAE,KAAKC,iBAJrB;AAKE,MAAA,YAAY,EAAE,KAAKC,iBALrB;AAME,MAAA,YAAY,EAAE,KAAKS,iBANrB;AAOE,MAAA,cAAc,EAAE,KAAKI,mBAPvB;AAQE,MAAA,WAAW,EAAE,KAAKI,gBARpB;AASE,MAAA,KAAK,EAAE,KAAKrC,KAAL,CAAWC,UATpB;AAUE,MAAA,mBAAmB,EAAE,CAAC,KAAKD,KAAL,CAAWG,SAVnC;AAWE,MAAA,iBAAiB,EAAE,CAAC,KAAKH,KAAL,CAAWU,OAXjC;AAYE,MAAA,cAAc,EAAE,CAAC,KAAKV,KAAL,CAAWI,SAZ9B;AAaE,MAAA,aAAa,EAAE,CAAC,KAAKJ,KAAL,CAAWK,UAb7B;AAcE,MAAA,mBAAmB,EAAE,CAAC,KAAKL,KAAL,CAAWW,SAdnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAsBD;;AAlT0B;;AAsT7B,eAAeZ,GAAf","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport Calculator from './Components/Calculator/Calculator';\n\nclass App extends Component  {\n\n  state = {\n    currentVal: \"_\",\n    start: true,\n    operators: false,\n    zeroFirst: true,\n    numAllowed: true,\n    zeroFirstAgo: 0,\n    operatorsAgo: 0,\n    decimalAgo: 0,\n    oldOperators: 0,\n    decimal: true,\n    backspace: true\n  };\n\n  numberClickHandler = (event) => {\n    if (this.state.start) {\n      this.setState({ \n        currentVal: `${event.currentTarget.value}`,\n        start: false, \n        oldOperators: this.state.operatorsAgo, \n        operators: true, \n        operatorsAgo: 1,\n        zeroFirst: true,\n        numAllowed: true,\n        zeroFirstAgo: this.state.zeroFirstAgo+1,\n        decimalAgo: this.state.decimalAgo+1,\n        //decimal: true\n      });\n    }\n    else{\n      \n      this.setState({ \n        currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n        operators: true,\n        oldOperators: this.state.operatorsAgo,\n        operatorsAgo: this.state.operatorsAgo+1,\n        zeroFirst: true,\n        numAllowed: true,\n        zeroFirstAgo: this.state.zeroFirstAgo+1,\n        decimalAgo: this.state.decimalAgo+1,\n        //decimal: true\n      });\n    }\n  }\n\n  operatorClickHandler = (event) => {\n    this.setState({ \n      currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n      start: false, \n      operators: false, \n      oldOperators: this.state.operatorsAgo,\n      operatorsAgo: 0,\n      decimal: true,\n      zeroFirst: true,\n      numAllowed: true,\n      zeroFirstAgo: this.state.zeroFirstAgo+1,\n      decimalAgo: this.state.decimalAgo+1\n    });\n  }\n\n  divideClickHandler = (event) => {\n    this.setState({ \n      currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n      start: false, \n      operators: false, \n      oldOperators: this.state.operatorsAgo,\n      operatorsAgo: 0,\n      decimal: true,\n      zeroFirst: false,\n      numAllowed: true,\n      zeroFirstAgo: this.state.zeroFirstAgo+1,\n      decimalAgo: this.state.decimalAgo+1\n    });\n  }\n\n  clearClickHandler = () => {\n    this.setState({ \n      currentVal: \"_\", \n      start: true, \n      operators: false,\n      operatorsAgo: 0,\n      oldOperators: 0,\n      zeroFirst: true,\n      numAllowed: true,\n      zeroFirstAgo: 0,\n      decimalAgo: 0,\n      decimal: true,\n      backspace: true\n    });\n  }\n\n  equalClickHandler = () => {\n    //const newStr = eval(this.state.currentVal).toString();\n\n    try {\n    const testnewStr = Math.round(eval(this.state.currentVal) * 100000000)/100000000;\n    const newStr = testnewStr.toString();\n\n    this.setState({ \n      currentVal: newStr,\n      operatorsAgo: newStr.length,\n      oldOperators: newStr.length,\n      start: true,\n      decimal: true});\n    } catch(err) {\n      this.setState({\n        currentVal: \"error\",\n        numAllowed: false,\n        decimal: false,\n        operators: false,\n        zeroFirst: false,\n        backspace: false\n      })\n    }\n  }\n\n  bkspcClickHandler = () => {\n    const len = this.state.currentVal.length;\n    const newStr = this.state.currentVal.substring(0,len-1);\n\n    if(len > 1 && this.state.currentVal.charAt(len-2) === '/')\n    {\n      \n      this.setState({ \n        currentVal: `${newStr}`, \n        operators: false, \n        start: false, \n        zeroFirst: false,\n        operatorsAgo: this.state.oldOperators,\n        decimalAgo: this.state.decimalAgo-1\n      });\n    }\n    else if(len > 1 && this.state.operatorsAgo === 1) //if last char is operator\n      this.setState({ \n        currentVal: `${newStr}`, \n        operators: false, \n        start: false, \n        operatorsAgo: this.state.oldOperators,\n        decimalAgo: this.state.decimalAgo-1\n      });\n    else if(len > 1 && this.state.zeroFirstAgo === 1) //if last char is a 0\n      this.setState({ \n        currentVal: `${newStr}`, \n        operators: true, \n        start: false,\n        oldOperators: this.state.oldOperators-1,\n        operatorsAgo: this.state.operatorsAgo-1,\n        zeroFirstAgo: this.state.zeroFirstAgo-1,\n        zeroFirst: false,\n        decimalAgo: this.state.decimalAgo-1,\n        decimal: true\n      });\n    else if(len > 1 && this.state.decimalAgo === 1) //if last char is a decimal\n      this.setState({ \n        currentVal: `${newStr}`,\n        start: false, \n        operators: true, \n        operatorsAgo: this.state.operatorsAgo-1,\n        zeroFirstAgo: this.state.zeroFirstAgo-1,\n        decimalAgo: this.state.decimalAgo-1,\n        decimal: false\n      });\n    else if(len > 1)\n      this.setState({ \n        currentVal: `${newStr}`,\n        start: false, \n        operators: true, \n        operatorsAgo: this.state.operatorsAgo-1,\n        zeroFirstAgo: this.state.zeroFirstAgo-1,\n        decimalAgo: this.state.decimalAgo-1\n      });\n    else if (len === 1)\n      this.setState({ \n        currentVal: \"_\", \n        start: true, \n        operators: false, \n        operatorsAgo: 0,\n        zeroFirst: true\n      });  \n  }\n\n  decimalClickHandler = async (event) => {\n    if (this.state.start) \n    {\n      await this.setState({ \n        currentVal: `${event.currentTarget.value}`,\n        start: false, \n        oldOperators: this.state.operatorsAgo, \n        operators: false, \n        operatorsAgo: this.state.operatorsAgo+1,\n        decimal: false,\n        decimalAgo: 0,\n        zeroFirst: true,\n        numAllowed: true,\n        zeroFirstAgo: this.state.zeroFirstAgo+1\n      });\n    }\n    else\n    {\n      await this.setState({ \n        currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n        operators: false,\n        oldOperators: this.state.operatorsAgo,\n        operatorsAgo: this.state.operatorsAgo+1,\n        decimal: false,\n        decimalAgo: 0,\n        zeroFirst: true,\n        numAllowed: true,\n        zeroFirstAgo: this.state.zeroFirstAgo+1\n      });   \n    }\n\n    const splitResult = this.state.currentVal.split(\"/\");\n    const splitLen = splitResult.length;\n    \n    if(splitResult[splitLen - 1] === 0)\n    {\n      this.setState({\n        operators: false\n      })\n    }\n  }\n\n  zeroClickHandler = async (event) => {\n    if (this.state.start) \n    {\n      await this.setState({ \n        currentVal: `${event.currentTarget.value}`,\n        start: false, \n        oldOperators: this.state.operatorsAgo, \n        operators: true, \n        operatorsAgo: this.state.operatorsAgo+1,\n        //decimal: true,\n        decimalAgo: this.state.decimalAgo+1,\n        zeroFirst: false,\n        numAllowed: false,\n        zeroFirstAgo: 0\n      });\n    }\n    else\n    {\n      await this.setState({ \n        currentVal: `${this.state.currentVal}${event.currentTarget.value}`,\n        operators: true,\n        oldOperators: this.state.operatorsAgo,\n        operatorsAgo: this.state.operatorsAgo+1,\n        //decimal: true,\n        decimalAgo: this.state.decimalAgo+1,\n        zeroFirstAgo: 0\n      });\n    }\n\n    if(this.state.operatorsAgo === 0)\n    {\n      this.setState({\n        zeroFirst: false\n      });\n    }\n\n    const splitResult = this.state.currentVal.split(\"/\");\n    const splitLen = splitResult.length;\n\n    if(splitResult[splitLen - 1] === 0)\n    {\n      this.setState({\n        decimal: false,\n        operators: false\n      });\n    }\n    /*else\n    {\n      this.setState({\n        operators: true\n      });\n    }*/\n\n    //.0 not registering\n\n    //try splitting by '/' check the last element in array then if == 0, dont allow '='\n  }\n\n  render() {\n    return (\n      <div>\n        <Calculator \n          numClicked={this.numberClickHandler}\n          operatorClicked={this.operatorClickHandler}\n          divideClicked={this.divideClickHandler}\n          clearClicked={this.clearClickHandler}\n          equalClicked={this.equalClickHandler}\n          bkspcClicked={this.bkspcClickHandler}\n          decimalClicked={this.decimalClickHandler}\n          zeroClicked={this.zeroClickHandler}\n          value={this.state.currentVal}\n          operatorsNotAllowed={!this.state.operators}\n          decimalNotAllowed={!this.state.decimal}\n          zeroNotAllowed={!this.state.zeroFirst}\n          numNotAllowed={!this.state.numAllowed}\n          backspaceNotAllowed={!this.state.backspace}>     \n        </Calculator>\n      </div>\n    \n      \n    );\n  }\n}\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}